# .gitlab-ci.yml for pubswh-ui
#
# == Reference:
#   - https://sas.cr.usgs.gov/
#   - https://docs.gitlab.com/ee/ci/yaml/
#   - https://docs.gitlab.com/ee/ci/multi_project_pipelines.html
#
# == CI Variables:
#   The following CI variables are expected to be set outside of this file.
#
#   ARTIFACTORY_BASE_URL
#     The base URL for the SAS group's Artifactory for uploading the
#     asset artifact.
#
#   ARTIFACTORY_TOKEN
#     A token used to authenticate with SAS Artifactory for uploading the
#     asset artifact.
#
#   DOCKER_REGISTRY
#     Address to the Docker image registry.
#
#   DOCKER_REGISTRY_USER
#     The username for authenticating with the Docker image registry.
#
#   DOCKER_REGISTRY_PASS
#     The password for authenticating with the Docker image registry.
#     This is restricted to protected branches and tags!
#
#   DEPLOY_TRIGGER_TOKEN
#     The API token for the deployment pipeline as configured on the deployment
#     repository.
#
#   DEPLOY_TRIGGER_URL
#     The API URL for the deployment pipeline as configured on the deployment
#     repository.
#
stages:
  - Build
  - Test
  - Package Assets
  - Trigger Deployment

variables:
  # The full name of the Docker image to produce, including the registry address.
  # In most cases, this should be left alone.
  IMAGE_NAME: ${DOCKER_REGISTRY}/pubs-docker/pubswh-ui
  IMAGE_TAG: ${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
  # The asset files are packaged and uploaded to Artifactory for deployment.
  # This sets the filename to use for the artifact.
  ASSET_ARTIFACT_FILE: pubswh-assets-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}.zip

#
# == Docker Build
#
Build Docker Image:
  image: docker:19
  stage: Build
  services:
    - docker:dind
  tags:
    - docker
  only:
    variables:
      # We must run on a protected branch to access the DOCKER_REGISTRY_PASS variable.
      - $CI_COMMIT_REF_PROTECTED == "true"
  before_script:
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASS} ${DOCKER_REGISTRY}
  script:
    - docker build
      --pull
      -t ${IMAGE_NAME}:${IMAGE_TAG}
      --build-arg python_image=${SAS_IMAGES_URL}/base-images/python
      --build-arg python_image_tag=3.7-slim-buster
      -f Dockerfile-ci .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}

#
# == Build Static Assets
#
Build Assets:
  image: ${SAS_IMAGES_URL}/base-images/node:12.16
  stage: Build
  tags:
    - docker
  script:
    - cd assets
    - npm install
    - npm run build
  artifacts:
    paths:
      - assets/dist

Test Assets:
  image: ${SAS_IMAGES_URL}/base-images/node:12.16
  stage: Test
  services:
    - docker:dind
  tags:
    - docker
  script:
    - 'apt-get update'
    - 'apt-get install -y firefox-esr'
    - 'cd assets'
    - 'npm install'
    - 'npm run test'

Test Server:
  image: pkg.cr.usgs.gov/docker-remote/docker:20
  stage: Test
  services:
    - docker:dind
  tags:
    - docker
  script:
    - 'apk add --no-cache curl'
    - 'curl -L -k "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose'
    - 'chmod +x /usr/bin/docker-compose'
    #- 'ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose'
    - 'docker-compose --version'
    - 'cp server/config.py.sample server/instance/config.py'
    - 'cd server'
    - 'docker-compose -f docker-compose.yml -f docker-compose.ci.yml run server'
#
# == Upload Assets to Artifactory
#
# This job zips the "assets/" directory and uploads it to Artifactory. The URL
# to # the artifact is passed in the deployment trigger.
#
# NOTE: This uses an ARTIFACTORY_TOKEN, which is specified as a global ci
Package Assets:
  image: ${SAS_IMAGES_URL}/base-images/sas-deploy-tool:latest
  stage: Package Assets
  dependencies:
    - Build Assets
  tags:
    - docker
  only:
    variables:
      - $CI_COMMIT_REF_PROTECTED == "true"
  script:
    - 'zip -9 -r ${ASSET_ARTIFACT_FILE} assets/dist'
    # Compute the sha1sum of the .zip file for uploading to artifactory.
    - export SHA1SUM_ASSET_FILE=$(sha1sum ${ASSET_ARTIFACT_FILE} | cut -d " " -f1)
    - curl --fail -k
      -H "X-JFrog-Art-Api:${ARTIFACTORY_TOKEN}"
      -H "X-Checksum-Sha1:${SHA1SUM_ASSET_FILE}"
      -T ${ASSET_ARTIFACT_FILE}
      ${ARTIFACTORY_BASE_URL}/pubswh/${ASSET_ARTIFACT_FILE}

#
# == Deployment Triggers
#
# These jobs use 'curl' to make a request to the GitLab API to trigger the
# deployment repository's pipeline. The pipeline trigger is configured on
# the deployment repository under "Settings -> CI/CD -> Pipeline Triggers",
# which provides an API URL and token.
#
# References:
#   - https://docs.gitlab.com/ee/ci/triggers/README.html
#
.deploy_trigger:
  image: ${SAS_IMAGES_URL}/base-images/curl:latest
  stage: Trigger Deployment
  tags:
    - docker
  only:
    variables:
      - $CI_COMMIT_REF_PROTECTED == "true"
  script:
    - curl -X POST
      -F variables[PUBSWH_UI_IMAGE]=${IMAGE_NAME}
      -F variables[PUBSWH_UI_IMAGE_TAG]=${IMAGE_TAG}
      -F variables[ASSET_ARTIFACT_URL]=${ARTIFACTORY_BASE_URL}/pubswh/${ASSET_ARTIFACT_FILE}
      -F token=${DEPLOY_TRIGGER_TOKEN}
      -F ref=${DEPLOY_TRIGGER_REF}
      ${DEPLOY_TRIGGER_URL}

Development deployment:
  extends: .deploy_trigger
  only:
    refs:
      - master
  variables:
    # The branch of the deployment repository to trigger.
    DEPLOY_TRIGGER_REF: develop

Staging deployment:
  extends: .deploy_trigger
  only:
    refs:
      - master
  variables:
    # The branch of the deployment repository to trigger.
    DEPLOY_TRIGGER_REF: release

